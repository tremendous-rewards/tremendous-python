# coding: utf-8

"""
    API Endpoints

    Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and its members within Tremendous, please see the Tremendous Organizational API.

    The version of the OpenAPI document: 2
    Contact: developers@tremendous.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from tremendous.models.list_connected_organizations200_response_connected_organizations_inner_organization import ListConnectedOrganizations200ResponseConnectedOrganizationsInnerOrganization
from typing import Optional, Set
from typing_extensions import Self

class ListConnectedOrganizations200ResponseConnectedOrganizationsInner(BaseModel):
    """
    ListConnectedOrganizations200ResponseConnectedOrganizationsInner
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)] = Field(description="Tremendous' identifier for the connected organization.")
    client_id: StrictStr = Field(description="Client ID of the OAuth app that is to be used by the platform once the integration is complete.")
    created_at: datetime = Field(description="Timestamp of when the connected organization was created.")
    organization: Optional[ListConnectedOrganizations200ResponseConnectedOrganizationsInnerOrganization] = None
    __properties: ClassVar[List[str]] = ["id", "client_id", "created_at", "organization"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[A-Z0-9]{4,20}", value):
            raise ValueError(r"must validate the regular expression /[A-Z0-9]{4,20}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListConnectedOrganizations200ResponseConnectedOrganizationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # set to None if organization (nullable) is None
        # and model_fields_set contains the field
        if self.organization is None and "organization" in self.model_fields_set:
            _dict['organization'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListConnectedOrganizations200ResponseConnectedOrganizationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "client_id": obj.get("client_id"),
            "created_at": obj.get("created_at"),
            "organization": ListConnectedOrganizations200ResponseConnectedOrganizationsInnerOrganization.from_dict(obj["organization"]) if obj.get("organization") is not None else None
        })
        return _obj


